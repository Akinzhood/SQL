-- -----------------------------------------------------------------------
-- 2.	Data Retrieval and Analysis
-- -----------------------------------------------------------------------

--Total number of films in each category
SELECT c.category_id, c.name AS category_name,
COUNT(f.film_id) AS total_films
FROM film f
JOIN film_category fc
ON f.film_id=fc.film_id
JOIN category c
ON fc.category_id =c.category_id
GROUP BY c.category_id, c.name;


--Top 5 customers who have rented the most films.
SELECT c.customer_id, c.first_name, c.last_name,
COUNT(r.rental_id) AS total_rentals
FROM customer c
JOIN rental r 
ON c.customer_id = r.customer_id
GROUP BY c.customer_id,c.first_name,c.last_name
ORDER BY total_rentals DESC
LIMIT 5;

--Number of rentals per month for the past year
SELECT EXTRACT (YEAR FROM r.rental_date) AS rental_year,
EXTRACT(MONTH FROM r.rental_date) AS rental_month,
COUNT(r.rental_id) AS num_rentals
FROM rental r 
GROUP BY 
 EXTRACT (YEAR FROM r.rental_date),EXTRACT(MONTH FROM r.rental_date);


-- Total revenue generated by each store.
SELECT s.store_id, s.manager_staff_id, 
SUM(p.amount) AS total_revenue
FROM store s
JOIN customer c ON s.store_id = c.store_id
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY s.store_id, s.manager_staff_id
ORDER BY total_revenue;

-- -----------------------------------------------------------------------
-- 3.	Data Manipulation and Transformation
-- -----------------------------------------------------------------------

-- Average rental duration for each film
SELECT f.film_id, f.title, 
       AVG(EXTRACT(EPOCH FROM (r.return_date - r.rental_date)) / 86400) AS avg_rental_duration
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
WHERE r.return_date IS NOT NULL
GROUP BY f.film_id, f.title
ORDER BY avg_rental_duration DESC;


-- Films that have not been rented in the last 90 days
SELECT f.film_id, f.title
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id
LEFT JOIN rental r ON i.inventory_id = r.inventory_id
WHERE r.rental_date IS NULL
   OR r.rental_date < CURRENT_DATE - INTERVAL '90 days'
GROUP BY f.film_id, f.title
HAVING MAX(r.rental_date) < CURRENT_DATE - INTERVAL '90 days'
   OR MAX(r.rental_date) IS NULL
ORDER BY f.title;


-- Update of rental table that are overdue
ALTER TABLE rental ADD COLUMN overdue BOOLEAN DEFAULT FALSE;

UPDATE rental r
SET overdue = TRUE
FROM inventory i
JOIN film f ON i.film_id = f.film_id
WHERE r.inventory_id = i.inventory_id
  AND r.return_date IS NULL
  AND CURRENT_DATE > (r.rental_date + INTERVAL '1 day' * f.rental_duration);

SELECT * FROM rental WHERE overdue = TRUE;

-- -----------------------------------------------------------------------
-- 4.	Data Analysis
-- -----------------------------------------------------------------------

-- Identify Popular Films (Most Frequently Rented)
SELECT f.film_id, f.title, COUNT(r.rental_id) AS rental_count
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
GROUP BY f.film_id, f.title
ORDER BY rental_count DESC
LIMIT 10;

--Identify Popular Categories (Based on Film Rentals)
SELECT c.category_id, c.name AS category_name, COUNT(r.rental_id) AS rental_count
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.category_id, c.name
ORDER BY rental_count DESC
LIMIT 10;

-- Rental Trends (By Month or Year)
SELECT EXTRACT(YEAR FROM r.rental_date) AS year, 
       EXTRACT(MONTH FROM r.rental_date) AS month, 
       COUNT(r.rental_id) AS rentals
FROM rental r
GROUP BY year, month
ORDER BY year ASC;

-- Average Days Late for Returned Rentals
SELECT f.film_id, f.title, 
       AVG(EXTRACT(DAY FROM (r.return_date - r.rental_date)) - f.rental_duration) AS avg_days_late
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
WHERE r.return_date IS NOT NULL
  AND EXTRACT(DAY FROM (r.return_date - r.rental_date)) > f.rental_duration
GROUP BY f.film_id, f.title
ORDER BY avg_days_late DESC;

-- Overdue Rentals Analysis
SELECT f.film_id, f.title, COUNT(r.rental_id) AS overdue_count
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
WHERE r.overdue = TRUE
GROUP BY f.film_id, f.title
ORDER BY overdue_count DESC
LIMIT 10;

-- For overdue categories:
SELECT c.category_id, c.name AS category_name, COUNT(r.rental_id) AS overdue_count
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
WHERE r.overdue = TRUE
GROUP BY c.category_id, c.name
ORDER BY overdue_count DESC
LIMIT 10;
